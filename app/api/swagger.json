{
  "basePath": "/api/v1/",
  "definitions": {
    "ErrResponse": {
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdResponse": {
      "properties": {
        "id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OfferIDResponse": {
      "properties": {
        "offer_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OkResponse": {
      "properties": {
        "OK": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RequestAcceptOffer": {
      "properties": {
        "description": {
          "type": "string"
        },
        "skills": {
          "example": [
            "backend",
            "frontend"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RequestLogin": {
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RequestOffer": {
      "properties": {
        "mentor_id": {
          "type": "integer"
        },
        "skill_name": {
          "type": "string"
        }
      }
    },
    "RequestRegistration": {
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RequestUserUpdate": {
      "properties": {
        "about": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "SkillResponse": {
      "properties": {
        "color": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SkillsResponse": {
      "properties": {
        "skills": {
          "items": {
            "$ref": "#/definitions/SkillResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Token": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "about": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "is_mentor": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserAuthRequest": {
      "properties": {
        "auth_date": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "last_name": {
          "type": "string"
        },
        "photo_url": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserStatusResponse": {
      "properties": {
        "is_mentor": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserWithSkillResponse": {
      "properties": {
        "skills": {
          "example": [
            "frontend",
            "backend"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/User",
          "type": "object"
        }
      },
      "type": "object"
    },
    "UsersResponse": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UsersWithSkillResponse": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/UserWithSkillResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "host": "127.0.0.1",
  "info": {
    "contact": {
      "email": "varindv@gmail.com"
    },
    "description": "Приложение для поиска менторов с целью изучения информационных технологий.",
    "title": "GetMe App",
    "version": "1.0.0"
  },
  "paths": {
    "/auth/simple/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Аутентификация пользователя через логин + пароль",
        "parameters": [
          {
            "description": "Тело аутентификации",
            "in": "body",
            "name": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestLogin"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Успешная авторизация"
          },
          "401": {
            "description": "Некорректный логин или пароль",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Пользователь не найден",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "418": {
            "description": "Пользователь уже авторизован"
          },
          "422": {
            "description": "Некорректное тело запроса",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "login user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/simple/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "create new account",
        "parameters": [
          {
            "description": "Request body for user registration",
            "in": "body",
            "name": "register_info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestRegistration"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create user successfully",
            "schema": {
              "$ref": "#/definitions/IdResponse"
            }
          },
          "409": {
            "description": "user already exist",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "418": {
            "description": "User are authorized"
          },
          "422": {
            "description": "invalid body in request\", \"nickname already exist\", \"incorrect email or password\", \"incorrect nickname",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "can not do bd operation",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "create new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/telegram/login": {
      "get": {
        "description": "Получение сессии после аутентефикации через Телеграм",
        "parameters": [
          {
            "description": "Токен, подтверждающий авторизацию через телеграм",
            "in": "query",
            "name": "Token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Успешная авторизация, выставление сессионной куки"
          },
          "400": {
            "description": "Ошибка в запросе - не указан токен / указан невалидный токен",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "503": {
            "description": "Ошибка - метод недоступен",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение сессии после отправки формы в Телеграмм",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/telegram/register": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Проверка авторизации через телеграм",
        "parameters": [
          {
            "in": "body",
            "name": "UserAuthRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAuthRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Пользователь создан, проверка аутентификации успешна",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Проверка переданных данных неуспешна",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "503": {
            "description": "Ошибка сервера - метод недоступен",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Проверка авторизации",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/token": {
      "get": {
        "description": "Получение токена для подтверждения аутентификации через телеграм",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Успешная авторизация, выставление сессионной куки",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "503": {
            "description": "Ошибка - метод недоступен",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение токена",
        "tags": [
          "auth"
        ]
      }
    },
    "/logout": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "logout user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully logout"
          },
          "401": {
            "description": "User not are authorized"
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "logout user",
        "tags": [
          "auth"
        ]
      }
    },
    "/offer/{offer_id}/accept": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Метод для ментора на отклонение завяки на менторство с id = offer_id",
        "parameters": [
          {
            "description": "ID заявки на менторство",
            "in": "path",
            "name": "offer_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Заявка отклонена(удалена)"
          },
          "400": {
            "description": "Ошибка offer_id - у текущего пользователя нет заявки с таким id",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Заявка с id = offer_id не найдена",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Отклонить-удалить заявку на менторство",
        "tags": [
          "offer"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Метод для ментора на принятия завяки на менторство с id = id",
        "parameters": [
          {
            "description": "ID заявки на менторство",
            "in": "path",
            "name": "offer_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Данные для создания плана",
            "in": "body",
            "name": "plan_info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestAcceptOffer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Созданный план",
            "schema": {
              "$ref": "#/definitions/UserWithSkillResponse"
            }
          },
          "400": {
            "description": "Ошибка offer_id - у текущего пользователя нет заявки с таким id",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Заявка с id = offer_id не найдена",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "422": {
            "description": "Ошибка в переданном теле",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Принять заявку на менторство",
        "tags": [
          "offer"
        ]
      }
    },
    "/offers": {
      "get": {
        "description": "Список подавших заявку к ментору менти",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Список менти",
            "schema": {
              "$ref": "#/definitions/UsersResponse"
            }
          },
          "404": {
            "description": "Пользователь с данным id не ментор",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Список подавших заявку к ментору менти",
        "tags": [
          "offer"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Запись к ментору",
        "parameters": [
          {
            "description": "Тело запроса с данными для заявки на менторство",
            "in": "body",
            "name": "offer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestOffer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Запись успешна",
            "schema": {
              "$ref": "#/definitions/OfferIDResponse"
            }
          },
          "400": {
            "description": "Логическая ошибка = ментор и менти должны быть разными",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Ментор с данным ID не найден или скилл с таким именем не существует",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "409": {
            "description": "Заявка от к ментору уже существует",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Подать заявку к ментору",
        "tags": [
          "offer"
        ]
      }
    },
    "/skills": {
      "get": {
        "description": "Получение списка всех скиллов",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Список всех скиллов",
            "schema": {
              "$ref": "#/definitions/SkillsResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение списка всех скиллов",
        "tags": [
          "skills"
        ]
      }
    },
    "/skills/users": {
      "get": {
        "description": "Получить список пользователей у которых есть хотя бы один скилл из переданного списка",
        "parameters": [
          {
            "description": "список скиллов в формате skills=x,y,z",
            "in": "query",
            "name": "skills",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Список пользователей, у которых совпал хотя бы один из указанных скиллов",
            "schema": {
              "$ref": "#/definitions/UsersWithSkillResponse"
            }
          },
          "400": {
            "description": "Ошибка в переданном query параметре skills",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение всех пользователей с указанными скиллами (если нет совпадений, выводятся все менторы)",
        "tags": [
          "skills"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Получение данных текущего пользователя",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Данные пользователя",
            "schema": {
              "$ref": "#/definitions/UserWithSkillResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение данных текущего пользователя",
        "tags": [
          "user"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Обновление/изменение даных пользователя",
        "parameters": [
          {
            "description": "Тело запроса с новыми данными",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestUserUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Данные пользователя с изменениями",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Ошибка в переданном теле запроса",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Обновление даных пользователя",
        "tags": [
          "user"
        ]
      }
    },
    "/user/status": {
      "get": {
        "description": "Если true - показывается в поиске, иначе - нет",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Статус ментора",
            "schema": {
              "$ref": "#/definitions/UserStatusResponse"
            }
          },
          "404": {
            "description": "Текущий пользователь не найден",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение статуса пользователя-ментора",
        "tags": [
          "user"
        ]
      },
      "put": {
        "description": "Если true - показывается в поиске, иначе - нет",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Статус ментора",
            "schema": {
              "$ref": "#/definitions/UserStatusResponse"
            }
          },
          "404": {
            "description": "Текущий пользователь не найден",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Обновить статус пользователя-ментора",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{:user_id}": {
      "get": {
        "description": "Получение данных текущего пользователя",
        "parameters": [
          {
            "description": "user_id",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Данные пользователя с указанным id",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Ошибка в переданном параметре пути",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Пользователь с данным id не найден",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        },
        "summary": "Получение данных пользователя по id",
        "tags": [
          "user"
        ]
      }
    }
  },
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "description": "Взаимодействия с менторами",
      "name": "mentor"
    },
    {
      "description": "Работа с заявками на менторство",
      "name": "offer"
    },
    {
      "description": "Взаимодействия с планом развития",
      "name": "plan"
    },
    {
      "description": "Взаимодействие с пользователем",
      "name": "user"
    },
    {
      "description": "Аутентификация",
      "name": "auth"
    },
    {
      "description": "Взаимодействия с скиллами",
      "name": "skills"
    }
  ]
}