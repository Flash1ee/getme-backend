swagger: "2.0"
info:
  description: "Приложение для поиска менторов с целью изучения информационных технологий."
  version: "1.0.0"
  title: "GetMe App"
  contact:
    email: "varindv@gmail.com"
host: "127.0.0.1"
basePath: "/api/v1/"
tags:
  - name: "mentor"
    description: "Взаимодействия с менторами"
  - name: "offer"
    description: "Работа с заявками на менторство"
  - name: "plan"
    description: "Взаимодействия с планом развития"
  - name: "user"
    description: "Взаимодействие с пользователем"
  - name: "auth"
    description: "Аутентификация"
  - name: "skills"
    description: "Взаимодействия с скиллами"
schemes:
  #  - "https"
  - "http"
paths:
  /offers:
    get:
      tags:
        - "offer"
      summary: "Список подавших заявку к ментору менти"
      description:  "Список подавших заявку к ментору менти"
      responses:
        "200":
          description: "Список менти"
          schema:
            $ref: '#/definitions/UsersResponse'
        "404":
          description: "Пользователь с данным id не ментор"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - description: "Тело запроса с данными для заявки на менторство"
          in: body
          name: offer
          required: true
          schema:
            $ref: '#/definitions/RequestOffer'
    post:
      tags:
        - "offer"
      summary: "Подать заявку к ментору"
      description: "Запись к ментору"
      responses:
        "200":
          description: "Запись успешна"
          schema:
            $ref: '#/definitions/OfferIDResponse'
        "400":
          description: "Логическая ошибка = ментор и менти должны быть разными"
          schema:
            $ref: '#/definitions/ErrResponse'
        "404":
          description: "Ментор с данным ID не найден или скилл с таким именем не существует"
          schema:
            $ref: '#/definitions/ErrResponse'
        "409":
          description: "Заявка от к ментору уже существует"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
      produces:
        - "application/json"

  /user:
    get:
      tags:
        - "user"
      summary: "Получение данных текущего пользователя"
      description: "Получение данных текущего пользователя"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Данные пользователя"
          schema:
            $ref: '#/definitions/UserWithSkillResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
    post:
      tags:
        - "user"
      summary: "Обновление даных пользователя"
      description: "Обновление/изменение даных пользователя"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - description: "Тело запроса с новыми данными"
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RequestUserUpdate'
      responses:
        "200":
          description: "Данные пользователя с изменениями"
          schema:
            $ref: '#/definitions/User'
        "422":
          description: "Ошибка в переданном теле запроса"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
  /user/{:user_id}:
    get:
      tags:
        - "user"
      summary: "Получение данных пользователя по id"
      description: "Получение данных текущего пользователя"
      produces:
        - "application/json"
      parameters:
        - description: user_id
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        "200":
          description: "Данные пользователя с указанным id"
          schema:
            $ref: '#/definitions/User'
        "400":
          description: "Ошибка в переданном параметре пути"
          schema:
            $ref: '#/definitions/ErrResponse'
        "404":
          description: "Пользователь с данным id не найден"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
  /user/status:
    get:
      tags:
        - "user"
      summary: "Получение статуса пользователя-ментора"
      description: "Если true - показывается в поиске, иначе - нет"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Статус ментора"
          schema:
            $ref: '#/definitions/UserStatusResponse'
        "404":
          description: "Текущий пользователь не найден"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
    put:
      tags:
        - "user"
      summary: "Обновить статус пользователя-ментора"
      description: "Если true - показывается в поиске, иначе - нет"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Статус ментора"
          schema:
            $ref: '#/definitions/UserStatusResponse'
        "404":
          description: "Текущий пользователь не найден"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'

  /skills:
    get:
      tags:
        - "skills"
      summary: "Получение списка всех скиллов"
      description: "Получение списка всех скиллов"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Список всех скиллов"
          schema:
            $ref: '#/definitions/SkillsResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'

  /skills/users:
    get:
      tags:
        - "skills"
      summary: "Получение всех пользователей с указанными скиллами (если нет совпадений, выводятся все менторы)"
      description: "Получить список пользователей у которых есть хотя бы один скилл из переданного списка"
      produces:
        - "application/json"
      parameters:
        - name: "skills"
          in: "query"
          description: "список скиллов в формате skills=x,y,z"
          required: true
          type: array
      responses:
        "200":
          description: "Список пользователей, у которых совпал хотя бы один из указанных скиллов"
          schema:
            $ref: '#/definitions/UsersWithSkillResponse'
        "400":
          description: "Ошибка в переданном query параметре skills"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'

  /auth/telegram/register:
    get:
      tags:
        - "auth"
      summary: "Проверка авторизации"
      description: "Проверка авторизации через телеграм"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "UserAuthRequest"
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserAuthRequest'
      responses:
        "201":
          description: "Пользователь создан, проверка аутентификации успешна"
          schema:
            $ref: '#/definitions/User'
        "400":
          description: "Проверка переданных данных неуспешна"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
        "503":
          description: "Ошибка сервера - метод недоступен"
          schema:
            $ref: '#/definitions/ErrResponse'
  /auth/telegram/login:
    get:
      tags:
        - "auth"
      summary: "Получение сессии после отправки формы в Телеграмм"
      description: "Получение сессии после аутентефикации через Телеграм"
      produces:
        - "application/json"
      parameters:
        - name: "Token"
          in: "query"
          description: "Токен, подтверждающий авторизацию через телеграм"
          required: true
          type: "string"

      responses:
        "200":
          description: "Успешная авторизация, выставление сессионной куки"
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
        "400":
          description: "Ошибка в запросе - не указан токен / указан невалидный токен"
          schema:
            $ref: '#/definitions/ErrResponse'
        "503":
          description: "Ошибка - метод недоступен"
          schema:
            $ref: '#/definitions/ErrResponse'
  /auth/simple/register:
    post:
      consumes:
        - application/json
      description: create new account
      parameters:
        - description: Request body for user registration
          in: body
          name: register_info
          required: true
          schema:
            $ref: '#/definitions/RequestRegistration'
      produces:
        - application/json
      responses:
        "201":
          description: Create user successfully
          schema:
            $ref: '#/definitions/IdResponse'
        "409":
          description: user already exist
          schema:
            $ref: '#/definitions/ErrResponse'
        "418":
          description: User are authorized
        "422":
          description: invalid body in request", "nickname already exist", "incorrect
            email or password", "incorrect nickname
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: can not do bd operation
          schema:
            $ref: '#/definitions/ErrResponse'
      summary: create new user
      tags:
        - auth
  /auth/simple/login:
    post:
      consumes:
        - application/json
      description: "Аутентификация пользователя через логин + пароль"
      parameters:
        - description: "Тело аутентификации"
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/RequestLogin'
      produces:
        - application/json
      responses:
        "200":
          description: "Успешная авторизация"
        "401":
          description: "Некорректный логин или пароль"
          schema:
            $ref: '#/definitions/ErrResponse'
        "404":
          description: "Пользователь не найден"
          schema:
            $ref: '#/definitions/ErrResponse'
        "418":
          description: "Пользователь уже авторизован"
        "422":
          description: "Некорректное тело запроса"
          schema:
            $ref: '#/definitions/ErrResponse'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
      summary: login user
      tags:
        - auth
  /logout:
    post:
      consumes:
        - application/json
      description: logout user
      produces:
        - application/json
      responses:
        "201":
          description: Successfully logout
        "401":
          description: User not are authorized
        "500":
          description: server error
          schema:
            $ref: '#/definitions/ErrResponse'
      summary: logout user
      tags:
        - auth
  /auth/token:
    get:
      tags:
        - "auth"
      summary: "Получение токена"
      description: "Получение токена для подтверждения аутентификации через телеграм"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Успешная авторизация, выставление сессионной куки"
          schema:
            $ref: '#/definitions/Token'
        "500":
          description: "Ошибка сервера"
          schema:
            $ref: '#/definitions/ErrResponse'
        "503":
          description: "Ошибка - метод недоступен"
          schema:
            $ref: '#/definitions/ErrResponse'



definitions:
  ErrResponse:
    properties:
      error:
        type: string
    type: object
  OkResponse:
    properties:
      OK:
        type: string
    type: object
  Token:
    type: "object"
    properties:
      token:
        type: "string"
  UserAuthRequest:
    type: "object"
    properties:
      token:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      auth_date:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      username:
        type: "string"
      photo_url:
        type: "string"
      hash:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      first_name:
        type: "string"
      last_name:
        type: "string"
      about:
        type: "string"
      avatar:
        type: "string"
      is_mentor:
        type: "boolean"
  RequestLogin:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  RequestRegistration:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  IdResponse:
    properties:
      id:
        type: integer
    type: object
  OfferIDResponse:
    properties:
      offer_id:
        type: integer
    type: object
  SkillResponse:
    properties:
      name:
        type: string
      color:
        type: string
    type: object
  SkillsResponse:
    properties:
      skills:
        items:
          $ref: '#/definitions/SkillResponse'
        type: array
    type: object
  UserStatusResponse:
    properties:
      is_mentor:
        type: boolean
    type: object
  UserWithSkillResponse:
    properties:
      user:
        type: object
        $ref: '#/definitions/User'
      skills:
        type: array
        items:
          type: string
        example: ['frontend', "backend"]
    type: object
  UsersWithSkillResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/UserWithSkillResponse'
        type: array
    type: object
  UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/User'
        type: array
    type: object
  RequestUserUpdate:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      about:
        type: string
  RequestOffer:
      properties:
        skill_name:
          type: string
        mentor_id:
          type: integer




