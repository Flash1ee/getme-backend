@startuml
namespace app {
    class GeneralError << (S,Aquamarine) >> {
        + Err error
        + ExternalErr error

        + Error() string

    }
    interface Handler  {
        + ServeHTTP(ctx echo.Context) error
        + Connect(route *echo.Group, path string) 

    }
}


namespace delivery {
    class ErrResponse << (S,Aquamarine) >> {
        + Err string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class ErrorConvertor << (S,Aquamarine) >> {
        + UsecaseError(ctx echo.Context, usecaseErr error, codeByErr CodeMap) 
        + HandlerError(ctx echo.Context, code int, err error) 

    }
    class RespondError << (S,Aquamarine) >> {
        + Code int
        + Error error
        + Level logrus.Level

    }
    class Responder << (S,Aquamarine) >> {
        + Error(ctx echo.Context, code int, err error) 
        + Respond(ctx echo.Context, code int, data easyjson.Marshaler) 

    }
    class delivery.CodeMap << (T, #FF7700) >>  {
    }
}
"delivery.Responder" *-- "delivery.ErrorConvertor"
"utilits.LogObject" *-- "delivery.Responder"


namespace dto {
    class UserAuthRequest << (S,Aquamarine) >> {
        + ID int64
        + AuthDate int64
        + FirstName string
        + LastName string
        + Username string
        + Avatar string
        + Hash string

        + ToUserAuthUsecase() *UserAuthUsecase

    }
    class UserAuthUsecase << (S,Aquamarine) >> {
        + ID int64
        + AuthDate int64
        + FirstName string
        + LastName string
        + Username string
        + Avatar string
        + Hash string

    }
    class UserResponse << (S,Aquamarine) >> {
        + Nickname string
        + Fullname string
        + About string
        + Email string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class UsersResponse << (S,Aquamarine) >> {
        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class dto.UsersResponse << (T, #FF7700) >>  {
    }
}


namespace entities {
    class Task << (S,Aquamarine) >> {
        + ID int64
        + Name string
        + Description string
        + Deadline time.Time
        + Status string
        + PlanID int64
        + CreatedAt time.Time

    }
    class User << (S,Aquamarine) >> {
        + ID int64
        + FirstName string
        + LastName string
        + Nickname string
        + About string
        + Avatar string
        + Email string
        + IsSearchable bool
        + CreatedAt time.Time

    }
}


namespace handler {
    class BaseHandler << (S,Aquamarine) >> {
        - handlerMethods <font color=blue>map</font>[string]handler_interfaces.HandlerFunc
        - middlewares []handler_interfaces.HMiddlewareFunc

        - applyHFMiddleware(handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) handler_interfaces.HandlerFunc
        - applyMiddleware(handler handler_interfaces.Handler) handler_interfaces.HandlerFunc
        - getListMethods() []string
        - add(path string, echoHandlerFunc echo.HandlerFunc, route *echo.Group) 

        + AddMiddleware(middleware ...handler_interfaces.HMiddlewareFunc) 
        + AddMethod(method string, handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) 
        + Connect(route *echo.Group, path string) 
        + ServeHTTP(ctx echo.Context) error

    }
    class HelpHandlers << (S,Aquamarine) >> {
        + PrintRequest(r *http.Request) 
        + GetInt64FromParam(ctx echo.Context, name string) (int64, int, error)
        + GetPaginationFromQuery(ctx echo.Context) (*Pagination, int, error)
        + GetInt64FromQueries(ctx echo.Context, name string) (int64, int, error)
        + GetBoolFromQueries(ctx echo.Context, name string) bool
        + GetStringFromQueries(ctx echo.Context, name string) (string, int)
        + GetStringFromParam(ctx echo.Context, name string) (string, int)
        + GetParamToStruct(ctx echo.Context, data <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, int)
        + GetArrayStringFromQueries(ctx echo.Context, name string) ([]string, int)
        + GetRequestBody(ctx echo.Context, reqStruct easyjson.Unmarshaler) error

    }
    interface InterfaceBaseHandler  {
        - applyHFMiddleware(handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) handler_interfaces.HandlerFunc
        - applyMiddleware(handler handler_interfaces.Handler) handler_interfaces.Handler
        - getListMethods() []string
        - add(path string, handler handler_interfaces.HandlerFunc, route *echo.Group) 

        + AddMiddleware(middleware ...handler_interfaces.HMiddlewareFunc) 
        + AddMethod(method string, handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) 
        + ServeHTTP(w http.ResponseWriter, r *http.Request) 
        + Connect(route *mux.Route) 

    }
    class Pagination << (S,Aquamarine) >> {
        + Limit int64
        + Desc bool
        + Since string

    }
}
"handler.HelpHandlers" *-- "handler.BaseHandler"
"delivery.ErrorConvertor" *-- "handler.HelpHandlers"

"app.Handler" <|-- "handler.BaseHandler"
"handler_interfaces.Handler" <|-- "handler.BaseHandler"

namespace handler_factory {
    class HandlerFactory << (S,Aquamarine) >> {
        - usecaseFactory UsecaseFactory
        - logger *logrus.Logger
        - urlHandler *<font color=blue>map</font>[string]app.Handler

        - initAllHandlers() <font color=blue>map</font>[int]app.Handler

        + GetHandleUrls() *<font color=blue>map</font>[string]app.Handler

    }
    interface UsecaseFactory  {
        + GetUserUsecase() user_usecase.Usecase

    }
}

"server.HandlerFactory" <|-- "handler_factory.HandlerFactory"

namespace handler_interfaces {
    interface Handler  {
        + ServeHTTP(ctx echo.Context) error

    }
    class HandlerFunc << (S,Aquamarine) >> {
        + ServeHTTP(ctx echo.Context) error

    }
    class handler_interfaces.HFMiddlewareFunc << (T, #FF7700) >>  {
    }
    class handler_interfaces.HMiddlewareFunc << (T, #FF7700) >>  {
    }
    class handler_interfaces.HandlerFunc << (T, #FF7700) >>  {
    }
    class "echo.MiddlewareFunc" as echoMiddlewareFunc {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(echo.Context) error" as fontcolorbluefuncfontechoContexterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"handler_interfaces.Handler" <|-- "handler_interfaces.HandlerFunc"

namespace internal {
    class Config << (S,Aquamarine) >> {
        + LogLevel string
        + LogAddr string
        + Domain string
        + BindAddr string
        + Repository RepositoryConnections
        + TgAuth TelegramAuth

    }
    class RepositoryConnections << (S,Aquamarine) >> {
        + DataBaseUrl string

    }
    class TelegramAuth << (S,Aquamarine) >> {
        + Token string

    }
}


namespace middleware {
    class UtilitiesMiddleware << (S,Aquamarine) >> {
        - log utilits.LogObject

        + CheckPanic(h http.Handler) http.Handler
        + UpgradeLogger(handler http.Handler) http.Handler

    }
}


namespace postgresql {
    class TaskRepository << (S,Aquamarine) >> {
        - store *sqlx.DB

    }
}


namespace repository {
    interface Repository  {
    }
}


namespace repository_factory {
    class RepositoryFactory << (S,Aquamarine) >> {
        - expectedConnections utilits.ExpectedConnections
        - logger *logrus.Logger
        - userRepository repository.Repository

        + GetUserRepository() repository.Repository

    }
}

"usecase_factory.RepositoryFactory" <|-- "repository_factory.RepositoryFactory"

namespace server {
    class BaseServer << (S,Aquamarine) >> {
        + Config *internal.Config
        + Logger *logrus.Logger
        + Connections utilits.ExpectedConnections

        - checkConnection() error

        + Check() error

    }
    interface HandlerFactory  {
        + GetHandleUrls() *<font color=blue>map</font>[string]app.Handler

    }
    class Server << (S,Aquamarine) >> {
        + Start(config *internal.Config) error

    }
}
"server.BaseServer" *-- "server.Server"


namespace telegram_checker {
    class CheckerData << (S,Aquamarine) >> {
        + ID int64
        + AuthDate int64
        + FirstName string
        + LastName string
        + Username string
        + Avatar string

        + UserAuthToChecker(user *dto.UserAuthUsecase) *CheckerData

    }
    class TelegramChecker << (S,Aquamarine) >> {
        - log *logrus.Logger
        - token string
        - tokenHash hash.Hash

        + Check(user *dto.UserAuthUsecase) bool

    }
}

"user_usecase.authChecker" <|-- "telegram_checker.TelegramChecker"

namespace usecase_factory {
    interface RepositoryFactory  {
        + GetUserRepository() repository.Repository

    }
    class UsecaseFactory << (S,Aquamarine) >> {
        - log logrus.Logger
        - repositoryFactory RepositoryFactory
        - userUsecase user_usecase.Usecase
        - authChecker *telegram-checker.TelegramChecker

        + GetUserUsecase() user_usecase.Usecase

    }
}

"handler_factory.UsecaseFactory" <|-- "usecase_factory.UsecaseFactory"

namespace user_auth_handler {
    class UserAuthHandler << (S,Aquamarine) >> {
        - userUsecase user_usecase.Usecase

        + GET(ctx echo.Context) error

    }
}
"handler.BaseHandler" *-- "user_auth_handler.UserAuthHandler"


namespace user_repository {
    interface Repository  {
        + Create(us *entities.User) ([]entities.User, error)
        + Update(us *entities.User) (*entities.User, error)
        + Get(nickname string) (*entities.User, error)
        + Delete(nickname string) error

    }
}


namespace user_usecase {
    interface Usecase  {
        + Auth(user *dto.UserAuthUsecase) (*dto.UserResponse, error)

    }
    class UserUsecase << (S,Aquamarine) >> {
        - userRepository repository.Repository
        - authChecker authChecker

        + Auth(user *dto.UserAuthUsecase) (*dto.UserResponse, error)

    }
    interface authChecker  {
        + Check(data *dto.UserAuthUsecase) bool

    }
}

"user_usecase.Usecase" <|-- "user_usecase.UserUsecase"

namespace utilits {
    class ExpectedConnections << (S,Aquamarine) >> {
        + SqlConnection *sqlx.DB

    }
    class LogObject << (S,Aquamarine) >> {
        - log *logrus.Logger

        + BaseLog() *logrus.Logger
        + Log(r *http.Request) *logrus.Entry

    }
    interface MarshUnmarsh  {
    }
}


"delivery.<font color=blue>map</font>[error]RespondError" #.. "delivery.CodeMap"
"dto.[]UserResponse" #.. "dto.UsersResponse"
"handler_interfaces.<font color=blue>func</font>(Handler) Handler" #.. "handler_interfaces.HMiddlewareFunc"
"handler_interfaces.fontcolorbluefuncfontechoContexterror" #.. "handler_interfaces.HandlerFunc"
"handler_interfaces.echoMiddlewareFunc" #.. "handler_interfaces.HFMiddlewareFunc"
@enduml
