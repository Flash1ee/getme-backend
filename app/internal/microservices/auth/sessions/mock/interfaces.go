// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	models "getme-backend/internal/microservices/auth/sessions/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockSessionRepository) Del(session *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockSessionRepositoryMockRecorder) Del(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockSessionRepository)(nil).Del), session)
}

// GetUserId mocks base method.
func (m *MockSessionRepository) GetUserId(key string, updExpiration int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", key, updExpiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockSessionRepositoryMockRecorder) GetUserId(key, updExpiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockSessionRepository)(nil).GetUserId), key, updExpiration)
}

// Set mocks base method.
func (m *MockSessionRepository) Set(session *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSessionRepositoryMockRecorder) Set(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSessionRepository)(nil).Set), session)
}

// MockSessionUsecase is a mock of SessionUsecase interface.
type MockSessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUsecaseMockRecorder
}

// MockSessionUsecaseMockRecorder is the mock recorder for MockSessionUsecase.
type MockSessionUsecaseMockRecorder struct {
	mock *MockSessionUsecase
}

// NewMockSessionUsecase creates a new mock instance.
func NewMockSessionUsecase(ctrl *gomock.Controller) *MockSessionUsecase {
	mock := &MockSessionUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUsecase) EXPECT() *MockSessionUsecaseMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionUsecase) Check(uniqID string) (models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", uniqID)
	ret0, _ := ret[0].(models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionUsecaseMockRecorder) Check(uniqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionUsecase)(nil).Check), uniqID)
}

// CheckWithDelete mocks base method.
func (m *MockSessionUsecase) CheckWithDelete(tokenID string) (models.ResultByToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWithDelete", tokenID)
	ret0, _ := ret[0].(models.ResultByToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWithDelete indicates an expected call of CheckWithDelete.
func (mr *MockSessionUsecaseMockRecorder) CheckWithDelete(tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWithDelete", reflect.TypeOf((*MockSessionUsecase)(nil).CheckWithDelete), tokenID)
}

// Create mocks base method.
func (m *MockSessionUsecase) Create(userID int64) (models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionUsecaseMockRecorder) Create(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionUsecase)(nil).Create), userID)
}

// CreateByTokenID mocks base method.
func (m *MockSessionUsecase) CreateByTokenID(tokenID string, userID int64) (models.ResultByToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByTokenID", tokenID, userID)
	ret0, _ := ret[0].(models.ResultByToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByTokenID indicates an expected call of CreateByTokenID.
func (mr *MockSessionUsecaseMockRecorder) CreateByTokenID(tokenID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByTokenID", reflect.TypeOf((*MockSessionUsecase)(nil).CreateByTokenID), tokenID, userID)
}

// Delete mocks base method.
func (m *MockSessionUsecase) Delete(uniqID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uniqID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionUsecaseMockRecorder) Delete(uniqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionUsecase)(nil).Delete), uniqID)
}
