// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	entities "getme-backend/internal/app/skill/entities"
	entities0 "getme-backend/internal/app/user/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBaseUser mocks base method.
func (m *MockRepository) CreateBaseUser(nickname string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBaseUser", nickname)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBaseUser indicates an expected call of CreateBaseUser.
func (mr *MockRepositoryMockRecorder) CreateBaseUser(nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBaseUser", reflect.TypeOf((*MockRepository)(nil).CreateBaseUser), nickname)
}

// CreateFilledUser mocks base method.
func (m *MockRepository) CreateFilledUser(data *entities0.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilledUser", data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilledUser indicates an expected call of CreateFilledUser.
func (mr *MockRepositoryMockRecorder) CreateFilledUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilledUser", reflect.TypeOf((*MockRepository)(nil).CreateFilledUser), data)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(id int64) (*[]entities0.UserWithSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDWithSkill", id)
	ret0, _ := ret[0].(*[]entities0.UserWithSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDWithSkill", reflect.TypeOf((*MockRepository)(nil).FindByID), id)
}

// FindByNickname mocks base method.
func (m *MockRepository) FindByNickname(nickname string) (*entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNickname", nickname)
	ret0, _ := ret[0].(*entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNickname indicates an expected call of FindByNickname.
func (mr *MockRepositoryMockRecorder) FindByNickname(nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNickname", reflect.TypeOf((*MockRepository)(nil).FindByNickname), nickname)
}

// FindMentorByID mocks base method.
func (m *MockRepository) FindMentorByID(id int64) (*[]entities0.UserWithSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMentorByID", id)
	ret0, _ := ret[0].(*[]entities0.UserWithSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMentorByID indicates an expected call of FindMentorByID.
func (mr *MockRepositoryMockRecorder) FindMentorByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMentorByID", reflect.TypeOf((*MockRepository)(nil).FindMentorByID), id)
}

// GetMenteeByMentor mocks base method.
func (m *MockRepository) GetMenteeByMentor(mentorID int64) ([]entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenteeByMentor", mentorID)
	ret0, _ := ret[0].([]entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenteeByMentor indicates an expected call of GetMenteeByMentor.
func (mr *MockRepositoryMockRecorder) GetMenteeByMentor(mentorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenteeByMentor", reflect.TypeOf((*MockRepository)(nil).GetMenteeByMentor), mentorID)
}

// GetUsersBySkills mocks base method.
func (m *MockRepository) GetUsersBySkills(data []entities.Skill) ([]entities0.UserWithSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMentorsBySkills", data)
	ret0, _ := ret[0].([]entities0.UserWithSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBySkills indicates an expected call of GetUsersBySkills.
func (mr *MockRepositoryMockRecorder) GetUsersBySkills(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMentorsBySkills", reflect.TypeOf((*MockRepository)(nil).GetUsersBySkills), data)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(user *entities0.User) (*entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), user)
}
