// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	dto "getme-backend/internal/app/token/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUsecase) Check(identifierData dto.TokenSourcesUsecase, token dto.TokenUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSimple", identifierData, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockUsecaseMockRecorder) Check(identifierData, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSimple", reflect.TypeOf((*MockUsecase)(nil).Check), identifierData, token)
}

// CheckToken mocks base method.
func (m *MockUsecase) CheckToken(token dto.TokenUsecase) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockUsecaseMockRecorder) CheckToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockUsecase)(nil).CheckToken), token)
}

// CheckTokenByUser mocks base method.
func (m *MockUsecase) CheckTokenByUser(token dto.TokenUsecase, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTokenByUser", token, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTokenByUser indicates an expected call of CheckTokenByUser.
func (mr *MockUsecaseMockRecorder) CheckTokenByUser(token, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenByUser", reflect.TypeOf((*MockUsecase)(nil).CheckTokenByUser), token, userID)
}

// GetToken mocks base method.
func (m *MockUsecase) GetToken(userID int64) (dto.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", userID)
	ret0, _ := ret[0].(dto.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockUsecaseMockRecorder) GetToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockUsecase)(nil).GetToken), userID)
}

// GetTokenByData mocks base method.
func (m *MockUsecase) GetTokenByData(tokenSources dto.TokenSourcesUsecase) (dto.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByData", tokenSources)
	ret0, _ := ret[0].(dto.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByData indicates an expected call of GetTokenByData.
func (mr *MockUsecaseMockRecorder) GetTokenByData(tokenSources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByData", reflect.TypeOf((*MockUsecase)(nil).GetTokenByData), tokenSources)
}
