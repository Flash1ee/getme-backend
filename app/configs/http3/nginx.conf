upstream backend-read {
    ip_hash;
    server main weight=2;
    server main-2 weight=1;
    server main-3 weight=1;
}

upstream backend {
    server main;
}

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=all:32m max_size=1g;
proxy_cache_key "$scheme$request_method$host$request_uri";

log_format custom_log '[$time_local] $remote_addr - $remote_user - $server_name $host to: $upstream_addr: $request $status upstream_response_time $upstream_response_time msec $msec request_time $request_time';

map $request_method $upstream_location {
   GET     backend-read;
   default backend;
}

server {
    server_name         localhost;
    listen 443 ssl http2;
    listen 443 http3 reuseport;  # UDP listener for QUIC+HTTP/3

    ssl_protocols       TLSv1.3; # QUIC requires TLS 1.3
    ssl_certificate     /etc/nginx/ssl/getme.crt;
    ssl_certificate_key /etc/nginx/ssl/getme.key;

    add_header Alt-Svc 'h3=":443"';   # Advertise that HTTP/3 is available
    add_header QUIC-Status $quic;     # Sent when QUIC was used

    access_log /var/log/nginx/access.log custom_log;
    error_log /var/log/nginx/error.log;
    http3_push_preload on;

    client_max_body_size 10M;
    gzip on;
    gzip_comp_level 5;

    proxy_pass_header getme-backend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass_header Cookie;

    proxy_cache_methods GET HEAD; # default value
    proxy_cache_background_update on;
    proxy_cache_lock on;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 3;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    location / {
        root /static;
    }

    location /status {
        stub_status;
    }

    location /test {
        root /static;
    }

    location /admin {
        proxy_pass http://backend;
    }

    location /api/v1/docs {
        proxy_no_cache 1;
        alias /var/www/swagger-ui/;
    }

    location /api/v1/docs/edit {
        proxy_no_cache 1;
        alias /var/www/swagger-editor/;
    }

    location /api/v1/ {
        proxy_no_cache 1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_pass http://$upstream_location;
    }

    location /mirror1/ {
        proxy_no_cache 1;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_pass http://test-main/;
    }
}

server {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass_header Cookie;

    listen 80;
    server_name localhost;
    return 301 https://$server_name$request_uri;
}

