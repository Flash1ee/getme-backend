@startuml
namespace dto {
    class UserRequest << (S,Aquamarine) >> {
        + Fullname string
        + About string
        + Email string

        + ToUserEntities() *entities.User
        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class UserResponse << (S,Aquamarine) >> {
        + Nickname string
        + Fullname string
        + About string
        + Email string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class UsersResponse << (S,Aquamarine) >> {
        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class dto.UsersResponse << (T, #FF7700) >>  {
    }
}


namespace entities {
    class User << (S,Aquamarine) >> {
        + Nickname string
        + Fullname string
        + About string
        + Email string

    }
}


namespace postgresql {
    class UserRepository << (S,Aquamarine) >> {
        - store *sqlx.DB

        + Create(us *entities.User) ([]entities.User, error)
        + Get(nickname string) (*entities.User, error)
        + Update(us *entities.User) (*entities.User, error)

    }
}

"repository.Repository" <|-- "postgresql.UserRepository"

namespace repository {
    interface Repository  {
        + Create(us *entities.User) ([]entities.User, error)
        + Get(nickname string) (*entities.User, error)
        + Update(us *entities.User) (*entities.User, error)

    }
}


namespace usecase {
    interface Usecase  {
        + Create(us *dto.UserRequest) ([]dto.UserResponse, error)
        + Get(nickname string) (*dto.UserResponse, error)
        + Update(us *dto.UserRequest) (*dto.UserResponse, error)

    }
    class UserUsecase << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + Create(us *dto.UserRequest) ([]dto.UserResponse, error)
        + Get(nickname string) (*dto.UserResponse, error)
        + Update(us *dto.UserRequest) (*dto.UserResponse, error)

    }
}

"usecase.Usecase" <|-- "usecase.UserUsecase"

namespace user_create_handler {
    class UserCreateHandler << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + POST(ctx *routing.Context) error

    }
}
"handler.BaseHandler" *-- "user_create_handler.UserCreateHandler"


namespace user_profile_handler {
    class UserProfileHandler << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + GET(ctx *routing.Context) error
        + POST(ctx *routing.Context) error

    }
}
"handler.BaseHandler" *-- "user_profile_handler.UserProfileHandler"


"dto.[]UserResponse" #.. "dto.UsersResponse"
@enduml
