@startuml
namespace app {
    class ExpectedConnections << (S,Aquamarine) >> {
        + SqlConnection *sqlx.DB

    }
    class GeneralError << (S,Aquamarine) >> {
        + Err error
        + ExternalErr error

        + Error() string

    }
    interface Handler  {
        + ServeHTTP(ctx *fasthttp-routing.Context) error
        + Connect(router *fasthttp-routing.Route) 

    }
}


namespace delivery {
    class ErrResponse << (S,Aquamarine) >> {
        + Err string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class ErrorConvertor << (S,Aquamarine) >> {
        + UsecaseError(ctx *fasthttp-routing.Context, usecaseErr error, codeByErr CodeMap) 
        + HandlerError(ctx *fasthttp-routing.Context, code int, err error) 

    }
    class RespondError << (S,Aquamarine) >> {
        + Code int
        + Error error
        + Level logrus.Level

    }
    class Responder << (S,Aquamarine) >> {
        + Error(ctx *fasthttp-routing.Context, code int, err error) 
        + Respond(ctx *fasthttp-routing.Context, code int, data easyjson.Marshaler) 

    }
    class delivery.CodeMap << (T, #FF7700) >>  {
    }
}
"delivery.Responder" *-- "delivery.ErrorConvertor"
"utilits.LogObject" *-- "delivery.Responder"


namespace dto {
    class UserRequest << (S,Aquamarine) >> {
        + Fullname string
        + About string
        + Email string

        + ToUserEntities() *entities.User
        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class UserResponse << (S,Aquamarine) >> {
        + Nickname string
        + Fullname string
        + About string
        + Email string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class UsersResponse << (S,Aquamarine) >> {
        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
    class dto.UsersResponse << (T, #FF7700) >>  {
    }
}


namespace entities {
    class User << (S,Aquamarine) >> {
        + Nickname string
        + Fullname string
        + About string
        + Email string

    }
}


namespace handler {
    class BaseHandler << (S,Aquamarine) >> {
        - handlerMethods <font color=blue>map</font>[string]handler_interfaces.HandlerFunc
        - middlewares []handler_interfaces.HMiddlewareFunc

        - applyHFMiddleware(handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) handler_interfaces.HandlerFunc
        - applyMiddleware(handler handler_interfaces.Handler) fasthttp-routing.Handler
        - getListMethods() []string
        - add(handler fasthttp-routing.Handler, route *fasthttp-routing.Route) 

        + AddMiddleware(middleware ...handler_interfaces.HMiddlewareFunc) 
        + AddMethod(method string, handlerMethod handler_interfaces.HandlerFunc, middlewares ...handler_interfaces.HFMiddlewareFunc) 
        + Connect(route *fasthttp-routing.Route) 
        + ServeHTTP(ctx *fasthttp-routing.Context) error

    }
    class HelpHandlers << (S,Aquamarine) >> {
        + PrintRequest(ctx *fasthttp-routing.Context) 
        + GetInt64FromParam(ctx *fasthttp-routing.Context, name string) (int64, int, error)
        + GetPaginationFromQuery(ctx *fasthttp-routing.Context) (*Pagination, int, error)
        + GetInt64FromQueries(ctx *fasthttp-routing.Context, name string) (int64, int, error)
        + GetBoolFromQueries(ctx *fasthttp-routing.Context, name string) bool
        + GetStringFromQueries(ctx *fasthttp-routing.Context, name string) (string, int)
        + GetStringFromParam(ctx *fasthttp-routing.Context, name string) (string, int)
        + GetArrayStringFromQueries(ctx *fasthttp-routing.Context, name string) ([]string, int)
        + GetRequestBody(ctx *fasthttp-routing.Context, reqStruct easyjson.Unmarshaler) error

    }
    class Pagination << (S,Aquamarine) >> {
        + Limit int64
        + Desc bool
        + Since string

    }
}
"handler.HelpHandlers" *-- "handler.BaseHandler"
"delivery.ErrorConvertor" *-- "handler.HelpHandlers"

"app.Handler" <|-- "handler.BaseHandler"
"handler_interfaces.Handler" <|-- "handler.BaseHandler"

namespace handler_factory {
    class HandlerFactory << (S,Aquamarine) >> {
        - repositoryFactory RepositoryFactory
        - logger *logrus.Logger
        - urlHandler *<font color=blue>map</font>[string]app.Handler

        - initAllHandlers() <font color=blue>map</font>[int]app.Handler

        + GetHandleUrls() *<font color=blue>map</font>[string]app.Handler

    }
    interface RepositoryFactory  {
        + GetUserRepository() repository.Repository

    }
}

"server.HandlerFactory" <|-- "handler_factory.HandlerFactory"

namespace handler_interfaces {
    class FastHTTPFunc << (S,Aquamarine) >> {
        + ServeHTTP(ctx *fasthttp-routing.Context) error
        + ServeFastHTTP(ctx *fasthttp.RequestCtx) 

    }
    interface Handler  {
        + ServeHTTP(ctx *fasthttp-routing.Context) error

    }
    class HandlerFunc << (S,Aquamarine) >> {
        + ServeHTTP(ctx *fasthttp-routing.Context) error

    }
    class handler_interfaces.FastHTTPFunc << (T, #FF7700) >>  {
    }
    class handler_interfaces.HFMiddlewareFunc << (T, #FF7700) >>  {
    }
    class handler_interfaces.HMiddlewareFunc << (T, #FF7700) >>  {
    }
    class handler_interfaces.HandlerFunc << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(*fasthttp.RequestCtx) " as fontcolorbluefuncfontfasthttpRequestCtx {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(*fasthttp-routing.Context) error" as fontcolorbluefuncfontfasthttproutingContexterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"handler_interfaces.Handler" <|-- "handler_interfaces.FastHTTPFunc"
"handler_interfaces.Handler" <|-- "handler_interfaces.HandlerFunc"

namespace internal {
    class Config << (S,Aquamarine) >> {
        + LogLevel string
        + LogAddr string
        + Domain string
        + BindAddr string
        + Repository RepositoryConnections

    }
    class RepositoryConnections << (S,Aquamarine) >> {
        + DataBaseUrl string

    }
}


namespace middleware {
    class UtilitiesMiddleware << (S,Aquamarine) >> {
        - log utilits.LogObject

        + CheckPanic() handler_interfaces.Handler
        + UpgradeLogger() handler_interfaces.Handler

    }
}


namespace models {
    class Log << (S,Aquamarine) >> {
        + Level string
        + Method string
        + Msg string
        + Adr string
        + Url url.URL
        + Time time.Time
        + WorkTime int64
        + ReqID string

        + MarshalJSON() ([]byte, error)
        + MarshalEasyJSON(w *jwriter.Writer) 
        + UnmarshalJSON(data []byte) error
        + UnmarshalEasyJSON(l *jlexer.Lexer) 

    }
}


namespace postgresql {
    class UserRepository << (S,Aquamarine) >> {
        - store *sqlx.DB

        + Create(us *entities.User) ([]entities.User, error)
        + Get(nickname string) (*entities.User, error)
        + Update(us *entities.User) (*entities.User, error)

    }
}

"repository.Repository" <|-- "postgresql.UserRepository"

namespace repository {
    interface Repository  {
        + Create(us *entities.User) ([]entities.User, error)
        + Get(nickname string) (*entities.User, error)
        + Update(us *entities.User) (*entities.User, error)

    }
}


namespace repository_factory {
    class RepositoryFactory << (S,Aquamarine) >> {
        - expectedConnections app.ExpectedConnections
        - logger *logrus.Logger
        - userRepository repository.Repository

        + GetUserRepository() repository.Repository

    }
}

"handler_factory.RepositoryFactory" <|-- "repository_factory.RepositoryFactory"

namespace server {
    interface HandlerFactory  {
        + GetHandleUrls() *<font color=blue>map</font>[string]app.Handler

    }
    class Server << (S,Aquamarine) >> {
        - config *internal.Config
        - logger *logrus.Logger
        - connections app.ExpectedConnections

        - checkConnection() error

        + Start(config *internal.Config) error

    }
}


namespace usecase {
    interface Usecase  {
        + Create(us *dto.UserRequest) ([]dto.UserResponse, error)
        + Get(nickname string) (*dto.UserResponse, error)
        + Update(us *dto.UserRequest) (*dto.UserResponse, error)

    }
    class UserUsecase << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + Create(us *dto.UserRequest) ([]dto.UserResponse, error)
        + Get(nickname string) (*dto.UserResponse, error)
        + Update(us *dto.UserRequest) (*dto.UserResponse, error)

    }
}

"usecase.Usecase" <|-- "usecase.UserUsecase"

namespace user_create_handler {
    class UserCreateHandler << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + POST(ctx *fasthttp-routing.Context) error

    }
}
"handler.BaseHandler" *-- "user_create_handler.UserCreateHandler"


namespace user_profile_handler {
    class UserProfileHandler << (S,Aquamarine) >> {
        - userRepository repository.Repository

        + GET(ctx *fasthttp-routing.Context) error
        + POST(ctx *fasthttp-routing.Context) error

    }
}
"handler.BaseHandler" *-- "user_profile_handler.UserProfileHandler"


namespace utilits {
    class LogObject << (S,Aquamarine) >> {
        - log *logrus.Logger

        + BaseLog() *logrus.Logger
        + Log(ctx *fasthttp-routing.Context) *logrus.Entry

    }
    interface MarshUnmarsh  {
    }
}


"delivery.<font color=blue>map</font>[error]RespondError" #.. "delivery.CodeMap"
"dto.[]UserResponse" #.. "dto.UsersResponse"
"handler_interfaces.fontcolorbluefuncfontfasthttproutingContexterror" #.. "handler_interfaces.HandlerFunc"
"handler_interfaces.fontcolorbluefuncfontfasthttpRequestCtx" #.. "handler_interfaces.FastHTTPFunc"
"handler_interfaces.<font color=blue>func</font>(Handler) Handler" #.. "handler_interfaces.HMiddlewareFunc"
"handler_interfaces.<font color=blue>func</font>(HandlerFunc) HandlerFunc" #.. "handler_interfaces.HFMiddlewareFunc"
@enduml
